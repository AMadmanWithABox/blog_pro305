AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "blog_pro305"

Globals:
  Function:
    Timeout: 3


Resources:
  BlogApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Models:
        User:
          type: "object"
          required:
            - username
            - password
          properties:
            user_id:
              type: "string"
            username:
              type: "string"
            password:
              type: "string"
        Blog:
          type: "object"
          required:
            - title
            - category
            - description
            - subscribers
          properties:
            blog_id:
              type: "string"
            user_id:
              type: "string"
            title:
              type: "string"
            category:
              type: "string"
            description:
              type: "string"
            subscribers:
              type: "array"
              items:
                type: "string"
        Post:
          type: "object"
          required:
            - blog_id
            - title
            - content
          properties:
            post_id:
              type: "string"
            user_id:
              type: "string"
            blog_id:
              type: "string"
            title:
              type: "string"
            content:
              type: "string"

      Cors:
        AllowMethods: "'GET,POST,DELETE,PUT,OPTIONS'"
        AllowHeaders: "'content-type'"
        AllowOrigin: "'*'"

      Auth:
        DefaultAuthorizer: Authorizer
        Authorizers:
          Authorizer:
            FunctionArn: !GetAtt Authorizer.Arn

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Handler: authorizer.handler
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: BlogUser
      Architectures:
        - x86_64
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./lambdas/authorization
      DockerTag: python3.12-v1

  User:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: BlogUser
      Architectures:
        - x86_64
      Events:
        GetAllUsers:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /user
            Method: get
            RestApiId: !Ref BlogApi
        GetUserById:
          Type: Api
          Properties:
            Path: /user/id/{id}
            Method: get
            RestApiId: !Ref BlogApi
        GetUserByUsername:
          Type: Api
          Properties:
            Path: /user/username/{username}
            Method: get
            RestApiId: !Ref BlogApi
        CreateUser:
          Type: Api
          Properties:
            Path: /user
            Method: post
        UpdateUser:
          Type: Api
          Properties:
            Path: /user
            Method: put
            RestApiId: !Ref BlogApi
        DeleteUser:
          Type: Api
          Properties:
            Path: /user
            Method: delete
            RestApiId: !Ref BlogApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./lambdas/user
      DockerTag: python3.12-v1

  Blog:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: BlogBlog
      Architectures:
        - x86_64
      Events:
        GetAllBlogs:
          Type: Api
          Properties:
            Path: /blog
            Method: get
            RestApiId: !Ref BlogApi
        GetBlogById:
          Type: Api
          Properties:
            Path: /blog/id/{id}
            Method: get
            RestApiId: !Ref BlogApi
        GetBlogByTitle:
          Type: Api
          Properties:
            Path: /blog/title/{title}
            Method: get
            RestApiId: !Ref BlogApi
        GetBlogByCategory:
          Type: Api
          Properties:
            Path: /blog/category/{category}
            Method: get
            RestApiId: !Ref BlogApi
        GetBlogByAuthor:
          Type: Api
          Properties:
            Path: /blog/author/{author}
            Method: get
            RestApiId: !Ref BlogApi
        CreateBlog:
          Type: Api
          Properties:
            Path: /blog
            Method: post
            RestApiId: !Ref BlogApi
        UpdateBlog:
          Type: Api
          Properties:
            Path: /blog
            Method: put
            RestApiId: !Ref BlogApi
        DeleteBlog:
          Type: Api
          Properties:
            Path: /blog/id/{id}
            Method: delete
            RestApiId: !Ref BlogApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./lambdas/blog
      DockerTag: python3.12-v1


  UserTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
          Name: Id
          Type: String
      TableName: BlogUser

  BlogTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
          Name: Id
          Type: String
      TableName: BlogBlog