AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "blog_pro305"

Globals:
  Function:
    Timeout: 3

Resources:
  BlogUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: BlogUserPool
      Schema:
        - Name: username
          AttributeDataType: String
          Mutable: false
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 4
          RequireUppercase: false
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false

  BlogUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: BlogClient
      GenerateSecret: false  # Set to true if the client is a server-side application
      UserPoolId: !Ref BlogUserPool

  BlogApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,DELETE,PUT,OPTIONS'"
        AllowHeaders: "'*'"
        AllowCredentials: "true"
        AllowOrigins: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt BlogUserPool.Arn

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: BlogUser
      Architectures:
        - x86_64
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./lambdas/authorization
      DockerTag: python3.12-v1

  User:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "cognito-idp:ListUsers"
                - "cognito-idp:AdminCreateUser"
                - "cognito-idp:AdminGetUser"
                - "cognito-idp:AdminUpdateUserAttributes"
                - "cognito-idp:AdminDeleteUser"
                # Add any other Cognito actions your function needs
              Resource:
                - !GetAtt BlogUserPool.Arn
      Architectures:
      - x86_64
      Environment:
        Variables:
          USER_POOL_ID: !Ref BlogUserPool
      Events:
        GetAllUsers:
          Type: Api
          Properties:
            Path: /user
            Method: get
            RestApiId: !Ref BlogApi
        GetUserById:
          Type: Api
          Properties:
            Path: /user/id/{id}
            Method: get
            RestApiId: !Ref BlogApi
        GetUserByUsername:
          Type: Api
          Properties:
            Path: /user/username/{username}
            Method: get
            RestApiId: !Ref BlogApi
        CreateUser:
          Type: Api
          Properties:
            Path: /user
            Method: POST
            RestApiId: !Ref BlogApi
            Auth:
              Authorizer: NONE
        UpdateUser:
          Type: Api
          Properties:
            Path: /user
            Method: put
            RestApiId: !Ref BlogApi
        DeleteUser:
          Type: Api
          Properties:
            Path: /user
            Method: delete
            RestApiId: !Ref BlogApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./lambdas/user
      DockerTag: python3.12-v1

  Blog:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: BlogBlog
      Architectures:
        - x86_64
      Events:
        GetAllBlogs:
          Type: Api
          Properties:
            Path: /blog
            Method: get
            RestApiId: !Ref BlogApi
        GetBlogById:
          Type: Api
          Properties:
            Path: /blog/id/{id}
            Method: get
            RestApiId: !Ref BlogApi
        GetBlogByTitle:
          Type: Api
          Properties:
            Path: /blog/title/{title}
            Method: get
            RestApiId: !Ref BlogApi
        GetBlogByCategory:
          Type: Api
          Properties:
            Path: /blog/category/{category}
            Method: get
            RestApiId: !Ref BlogApi
        GetBlogByAuthor:
          Type: Api
          Properties:
            Path: /blog/author/{author}
            Method: get
            RestApiId: !Ref BlogApi
        CreateBlog:
          Type: Api
          Properties:
            Path: /blog
            Method: post
            RestApiId: !Ref BlogApi
        UpdateBlog:
          Type: Api
          Properties:
            Path: /blog
            Method: put
            RestApiId: !Ref BlogApi
        DeleteBlog:
          Type: Api
          Properties:
            Path: /blog/id/{id}
            Method: delete
            RestApiId: !Ref BlogApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./lambdas/blog
      DockerTag: python3.12-v1

  BlogTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
          Name: Id
          Type: String
      TableName: BlogBlog
