AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "blog_pro305"

Globals:
  Function:
    Timeout: 3

Resources:
  BlogApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod
      CorsConfiguration:
        AllowMethods: "'GET,POST,DELETE,PUT,OPTIONS'"
        AllowHeaders: "'*'"
        AllowCredentials: "true"
        AllowOrigins: "'*'"

      Auth:
        DefaultAuthorizer: Authorizer
        Authorizers:
          Authorizer:
            FunctionArn: !GetAtt Authorizer.Arn
            FunctionInvokeRole: !GetAtt AuthorizerRole.Arn
            Identity:
              Headers:
                - Authorization
            AuthorizerPayloadFormatVersion: "2.0"
            EnableSimpleResponses: true


  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: BlogUser
      Architectures:
        - x86_64
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./lambdas/authorization
      DockerTag: python3.12-v1

  User:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: BlogUser
      Architectures:
        - x86_64
      Events:
        GetAllUsers:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /user
            Method: get
            ApiId: !Ref BlogApi
        GetUserById:
          Type: HttpApi
          Properties:
            Path: /user/id/{id}
            Method: get
            ApiId: !Ref BlogApi
        GetUserByUsername:
          Type: HttpApi
          Properties:
            Path: /user/username/{username}
            Method: get
            ApiId: !Ref BlogApi
        CreateUser:
          Type: HttpApi
          Properties:
            Path: /user
            Method: POST
            ApiId: !Ref BlogApi
            Auth:
              Authorizer: NONE
        UpdateUser:
          Type: HttpApi
          Properties:
            Path: /user
            Method: put
            ApiId: !Ref BlogApi
        DeleteUser:
          Type: HttpApi
          Properties:
            Path: /user
            Method: delete
            ApiId: !Ref BlogApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./lambdas/user
      DockerTag: python3.12-v1

  Blog:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: BlogBlog
      Architectures:
        - x86_64
      Events:
        GetAllBlogs:
          Type: HttpApi
          Properties:
            Path: /blog
            Method: get
            ApiId: !Ref BlogApi
        GetBlogById:
          Type: HttpApi
          Properties:
            Path: /blog/id/{id}
            Method: get
            ApiId: !Ref BlogApi
        GetBlogByTitle:
          Type: HttpApi
          Properties:
            Path: /blog/title/{title}
            Method: get
            ApiId: !Ref BlogApi
        GetBlogByCategory:
          Type: HttpApi
          Properties:
            Path: /blog/category/{category}
            Method: get
            ApiId: !Ref BlogApi
        GetBlogByAuthor:
          Type: HttpApi
          Properties:
            Path: /blog/author/{author}
            Method: get
            ApiId: !Ref BlogApi
        CreateBlog:
          Type: HttpApi
          Properties:
            Path: /blog
            Method: post
            ApiId: !Ref BlogApi
        UpdateBlog:
          Type: HttpApi
          Properties:
            Path: /blog
            Method: put
            ApiId: !Ref BlogApi
        DeleteBlog:
          Type: HttpApi
          Properties:
            Path: /blog/id/{id}
            Method: delete
            ApiId: !Ref BlogApi
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./lambdas/blog
      DockerTag: python3.12-v1


  UserTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
          Name: Id
          Type: String
      TableName: BlogUser

  BlogTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
          Name: Id
          Type: String
      TableName: BlogBlog